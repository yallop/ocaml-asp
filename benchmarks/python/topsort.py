def uniq(s): return tuple(set(s))

edges = dict((
    ('single_input', uniq(('simple_stmt', 'compound_stmt',))),
    ('file_input', uniq(('stmt',))),
    ('eval_input', uniq(('testlist',))),
    ('decorator', uniq(('dotted_name', 'arglist',))),
    ('decorators', uniq(('decorator',))),
    ('decorated', uniq(('decorators', 'classdef', 'funcdef', 'async_funcdef',))),
    ('async_funcdef', uniq(('funcdef',))),
    ('funcdef', uniq(('parameters', 'test', 'suite',))),
    ('parameters', uniq(('typedargslist',))),
    ('typedargslist', uniq(('tfpdef', 'test', 'tfpdef', 'test', 'tfpdef', 'tfpdef', 'test', 'tfpdef', 'tfpdef', 'tfpdef', 'tfpdef', 'test', 'tfpdef', 'tfpdef',))),
    ('tfpdef', uniq(('test',))),
    ('varargslist', uniq(('test',))),
    ('stmt', uniq(('simple_stmt', 'compound_stmt',))),
    ('simple_stmt', uniq(('small_stmt', 'small_stmt',))),
    ('small_stmt', uniq(('expr_stmt', 'del_stmt', 'pass_stmt', 'flow_stmt', 'import_stmt', 'global_stmt', 'nonlocal_stmt', 'assert_stmt',))),
    ('expr_stmt', uniq(('testlist_star_expr', 'annassign', 'augassign', 'yield_expr', 'testlist', 'yield_expr', 'testlist_star_expr',))),
    ('annassign', uniq(('test', 'test',))),
    ('testlist_star_expr', uniq(('test', 'star_expr', 'test', 'star_expr',))),
    ('del_stmt', uniq(('exprlist',))),
    ('flow_stmt', uniq(('break_stmt', 'continue_stmt', 'return_stmt', 'raise_stmt', 'yield_stmt',))),
    ('return_stmt', uniq(('testlist',))),
    ('yield_stmt', uniq(('yield_expr',))),
    ('raise_stmt', uniq(('test', 'test',))),
    ('assert_stmt', uniq(('test', 'test',))),
    ('compound_stmt', uniq(('if_stmt', 'while_stmt', 'for_stmt', 'try_stmt', 'with_stmt', 'funcdef', 'classdef', 'decorated', 'async_stmt',))),
    ('async_stmt', uniq(('funcdef', 'with_stmt', 'for_stmt',))),
    ('if_stmt', uniq(('test', 'suite', 'test', 'suite', 'suite',))),
    ('while_stmt', uniq(('test', 'suite', 'suite',))),
    ('for_stmt', uniq(('exprlist', 'testlist', 'suite', 'suite',))),
    ('try_stmt', uniq(('suite', 'except_clause', 'suite', 'suite', 'suite', 'suite',))),
    ('with_stmt', uniq(('with_item', 'with_item', 'suite',))),
    ('with_item', uniq(('test', 'expr',))),
    ('except_clause', uniq(('test',))),
    ('suite', uniq(('simple_stmt', 'stmt',))),
    ('test', uniq(('or_test', 'or_test', 'test', 'lambdef',))),
    ('test_nocond', uniq(('or_test', 'lambdef_nocond',))),
    ('lambdef', uniq(('varargslist', 'test',))),
    ('lambdef_nocond', uniq(('varargslist', 'test_nocond',))),
    ('or_test', uniq(('and_test', 'and_test',))),
    ('and_test', uniq(('not_test', 'not_test',))),
    ('not_test', uniq(('not_test', 'comparison',))),
    ('comparison', uniq(('expr', 'expr',))),
    ('star_expr', uniq(('expr',))),
    ('expr', uniq(('xor_expr', 'xor_expr',))),
    ('xor_expr', uniq(('and_expr', 'and_expr',))),
    ('and_expr', uniq(('shift_expr', 'shift_expr',))),
    ('shift_expr', uniq(('arith_expr', 'arith_expr',))),
    ('arith_expr', uniq(('term', 'term',))),
    ('term', uniq(('factor', 'factor',))),
    ('factor', uniq(('factor', 'power',))),
    ('power', uniq(('atom_expr', 'factor',))),
    ('atom_expr', uniq(('atom', 'trailer',))),
    ('atom', uniq(('yield_expr', 'testlist_comp', 'testlist_comp', 'dictoruniqmaker',))),
    ('testlist_comp', uniq(('test', 'star_expr', 'comp_for', 'test', 'star_expr',))),
    ('trailer', uniq(('arglist', 'subscriptlist',))),
    ('subscriptlist', uniq(('subscript', 'subscript',))),
    ('subscript', uniq(('test', 'test', 'test', 'sliceop',))),
    ('sliceop', uniq(('test',))),
    ('exprlist', uniq(('expr', 'star_expr', 'expr', 'star_expr',))),
    ('testlist', uniq(('test', 'test',))),
    ('dictoruniqmaker', uniq(('test', 'test', 'expr', 'comp_for', 'test', 'test', 'expr', 'test', 'star_expr', 'comp_for', 'test', 'star_expr',))),
    ('classdef', uniq(('arglist', 'suite',))),
    ('arglist', uniq(('argument', 'argument',))),
    ('argument', uniq(('test', 'comp_for', 'test', 'test', 'test', 'test',))),
    ('comp_iter', uniq(('comp_for', 'comp_if',))),
    ('sync_comp_for', uniq(('exprlist', 'or_test', 'comp_iter',))),
    ('comp_for', uniq(('sync_comp_for',))),
    ('comp_if', uniq(('test_nocond', 'comp_iter',))),
    ('yield_expr', uniq(('yield_arg',))),
    ('yield_arg', uniq(('test', 'testlist')))
))

# pprint.pprint(tarjan.tarjan(topsort.edges))
sorted = \
         [['lambdef',
           'testlist_comp',
           'testlist',
           'yield_arg',
           'yield_expr',
           'dictoruniqmaker',
           'atom',
           'star_expr',
           'exprlist',
           'varargslist',
           'lambdef_nocond',
           'test_nocond',
           'comp_if',
           'comp_iter',
           'sync_comp_for',
           'comp_for',
           'argument',
           'arglist',
           'sliceop',
           'subscript',
           'subscriptlist',
           'trailer',
           'atom_expr',
           'power',
           'factor',
           'term',
           'arith_expr',
           'shift_expr',
           'and_expr',
           'xor_expr',
           'expr',
           'comparison',
           'not_test',
           'and_test',
           'or_test',
           'test'],
          ['except_clause'],
          ['break_stmt'],
          ['continue_stmt'],
          ['raise_stmt'],
          ['return_stmt'],
          ['yield_stmt'],
          ['flow_stmt'],
          ['assert_stmt'],
          ['import_stmt'],
          ['pass_stmt'],
          ['nonlocal_stmt'],
          ['del_stmt'],
          ['global_stmt'],
          ['testlist_star_expr'],
          ['augassign'],
          ['annassign'],
          ['expr_stmt'],
          ['small_stmt'],
          ['simple_stmt'],
          ['with_item'],
          ['dotted_name'],
          ['decorator'],
          ['decorators'],
          ['tfpdef'],
          ['typedargslist'],
          ['parameters'],
          ['async_stmt',
           'decorated',
           'while_stmt',
           'with_stmt',
           'classdef',
           'for_stmt',
           'if_stmt',
           'try_stmt',
           'compound_stmt',
           'stmt',
           'suite',
           'funcdef',
           'async_funcdef'],
          ['single_input'],
          ['file_input'],
          ['eval_input']]

# next question: which are exposed?
